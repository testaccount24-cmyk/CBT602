/*-REXX edit macro--------------------------------------------------*\
|                                                                    |
| Macro Name: Put  (created on 11/06/2002)                           |
|                                                                    |
|    Purpose: Use PUT to copy lines from the dataset or member       |
|             currently being edited to another dataset or member    |
|                                                                    |
|     Syntax: PUT firstline lastline dsn|-member targetline          |
|                                                                    |
|             OR                                                     |
|                                                                    |
|             PUT dsn|-member targetline                             |
|                                                                    |
|                 and use C, CC, M, or MM line commands to indicate  |
|                 the line(s) or range of lines to be copied and     |
|                 pasted into the target daaset or member            |
|                                                                    |
|                 See the $PUT file for full documentation of the    |
|                 macro.                                             |
|                                                                    |
|     Author: Michael A. Newell, WB4HUC                              |
|                                                                    |
|    Changes:                                                        |
|                                                                    |
\*------------------------------------------------------------------*/
 ISREDIT "MACRO  (parm1 parm2 parm3 parm4) NOPROCESS"
 x = MSG('OFF')
 ADDRESS ISREDIT
 ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
 CALL Initialize_Variables

 /* If the variable PUTPARM is set to the value of "IMAC", then this
    is the second invocation of the exec, and the lines that were
    copied from the first invocation will be pasted into the target
    dataset during this invocation
 */

 ADDRESS ISPEXEC "VGET (putparm) PROFILE"
 IF putparm = "IMAC" THEN
    DO
      CALL Paste_Lines
      EXIT
    END

 /* Make sure that the macro parameters were entered                 */

 IF WORDS(parm1) = 0 THEN
    DO
      zedlmsg = "The correct syntax is: PUT firstline lastline dsn" ,
                "targetline, or PUT dsn targetline if line command" ,
                "ranges are specified"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
      EXIT 16
    END

 /* Get width of data being copied                                   */

 "(putwidth) = DATA_WIDTH"

 /* Find out if C, CC, M, or MM line command ranges were entered     */

 "PROCESS RANGE C M"

 range_rc = rc

 /* if range_rc >= 16, something is wrong with the line commands     */

 IF range_rc >= 16 THEN
    DO
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      EXIT 16
    END

 /* If rc = 0, valid line ranges were entered.
    If rc not zero, then no line ranges were entered, and we'll use
    the line number ranges that were entered with the macro invocation
 */

 IF range_rc = 0 THEN
    DO
      dsn   = parm1
      tline = parm2
      "(rcmd) = RANGE_CMD"
      IF Validate_Line_Number(tline,'target line')  /= 0 THEN EXIT 16
      "CUT .ZFRANGE .ZLRANGE R"
      cut_rc = rc
    END
 ELSE
    IF Cut_Lines() > 0 THEN EXIT 16

 /* Validate the target dsn or member name                           */

 IF Validate_dsn(dsn) /= 0 THEN EXIT 16

 /* Set the PUTPARM variable and write it to the profile pool        */

 putparm = "IMAC"
 ADDRESS ISPEXEC "VPUT (putparm tline putwidth) PROFILE"

 /* Edit the target dataset using this PUT macro as the initial
    macro. When the initial macro starts, it'll check the PUTPARM
    variable, and if it is set, execution will jump to the Paste_Lines
    subroutine
 */

 ADDRESS ISPEXEC "CONTROL DISPLAY SAVE"
 ADDRESS ISPEXEC "EDIT DATASET("dsn") MACRO(PUT)"
 edit_rc = rc
 ADDRESS ISPEXEC "CONTROL DISPLAY RESTORE"

 /* Free any pds that was allocated because a new member was created */

 IF ddn /= "DDN" THEN
    ADDRESS TSO "FREE DDNAME("ddn")"

 DROP ddn              /* just to be sure the name is re-initialized */

 /* Check the return code from the editing of the target dataset     */

 IF edit_rc = 4  THEN edit_rc = 0
 IF edit_rc /= 0 THEN
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"

 /* Reset the PUTPARM variable and write it to the profile pool      */

 putparm = ""
 ADDRESS ISPEXEC "VPUT (putparm) PROFILE"

 /* If the line commands were 'M' or 'MM', delete the lines          */

 IF cut_rc = 0 & rcmd = "M" THEN
    "DELETE .ZFRANGE .ZLRANGE"

EXIT 0

Cut_Lines:
   fline = parm1
   lline = parm2
   dsn   = parm3
   tline = parm4
   IF Validate_Line_Number(fline,'first line')   /= 0 THEN RETURN 16
   IF Validate_Line_Number(lline,'last line')    /= 0 THEN RETURN 16
   IF Validate_Line_Number(tline,'target line')  /= 0 THEN RETURN 16
   IF Validate_Line_Logic()                      /= 0 THEN RETURN 16
   IF fline = lline THEN
      DO
        "LABEL" fline "= .FL"
        "CUT .FL .FL R"
      END
   ELSE
      DO
        "LABEL" fline "= .FL"
        "LABEL" lline "= .LL"
        "CUT .FL .LL R"
      END
RETURN 0

Validate_Line_Number:
   ARG lnum, linename
   PARSE VAR lnum lnum '.' trash
   IF DATATYPE(lnum) /= "NUM" THEN
      DO
        zedlmsg = "The" linename "parameter must be numeric"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
        RETURN 16
      END
   IF lnum = 0 & linename /= "TARGET LINE" THEN
      DO
        zedlmsg = "The" linename "parameter cannot be zero"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
        RETURN 16
      END
   IF lnum < 0 THEN
      DO
        zedlmsg = "The" linename "cannot be less than zero"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
        RETURN 16
      END
RETURN 0

Validate_Line_Logic:
   If fline > lline THEN
      DO
        zedlmsg = "The first line cannot be greater than the last line"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
        RETURN 16
      END
   "(lastline) = LINENUM .ZLAST"
   IF lline > lastline THEN lline = lastline
RETURN 0

Validate_dsn:
   /* get datset name                                                */
   "(edsn,odsn,clevel) = DATASET"

   /* if only member name entered, construct the entire dsname       */
   IF LEFT(dsn,1) = '-' THEN
        dsn = "'"edsn"("RIGHT(dsn,LENGTH(dsn)-1)")'"

   /* get dataset status                                             */
   x = SYSDSN(dsn)

   /* if a new pds member name was entered, create it                */
   IF x = "MEMBER NOT FOUND" THEN
      DO
        ddn = "PUT"random()
        ADDRESS TSO "ALLOCATE DD("ddn") DA("dsn") SHR"
        x = "OK"
      END

   /* if something is wrong with the dataset, display error message  */
   IF x /= "OK" THEN
      DO
        zedlmsg = "ERROR:" x
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
        RETURN 16
      END
RETURN 0

Paste_Lines:
   putparm  = ""
   ADDRESS ISPEXEC "VPUT (putparm) PROFILE"
   ADDRESS ISPEXEC "VGET (tline putwidth) PROFILE"
   "PROCESS DEST"
   dest_rc = rc

   /* dest_rc = 20 means the dataset or pds member is empty          */
   IF dest_rc = 20 THEN
      DO
        "PASTE AFTER .ZFIRST"
        "LINE_AFTER 0 = MSGLINE (msgtextn)"
        CALL Check_Line_Lengths
        RETURN
      END

   /* new lines are added to the beginning of the dataset or member  */
   IF tline = 0 THEN
      DO
        "LABEL 1 = .TLP"
        "PASTE BEFORE .ZFIRST"
        "LINE_AFTER 0 = MSGLINE (msgtextb)"
        "LINE_BEFORE .TLP = MSGLINE (msgtexte)"
        CALL Check_Line_Lengths
        RETURN
      END

   "(lastline) = LINENUM .ZLAST"

   /* new lines are added to the end of the dataset or pds member    */
   IF tline >= lastline THEN
      DO
        tline = lastline
        "PASTE AFTER" lastline
        "LINE_AFTER" lastline "= MSGLINE (msgtextb)"
        "LINE_AFTER .ZLAST = MSGLINE (msgtexte)"
        CALL Check_Line_Lengths
        RETURN
      END

   /* new lines are added somewhere in the middle of the dataset or  */
   /* member - label .TLP is (T)arget (L)ine (P)lus 1                */
   "LABEL" tline + 1 "= .TLP"
   "PASTE AFTER" tline
   "LINE_AFTER" tline "= MSGLINE (msgtextb)"
   "LINE_BEFORE .TLP = MSGLINE (msgtexte)"
   CALL Check_Line_Lengths
RETURN

Check_Line_Lengths:
   "(linelen) = DATA_WIDTH"
   putwidth = STRIP(putwidth,'L','0')
   linelen  = STRIP(linelen,'L','0')
   IF putwidth > linelen THEN
      DO
        zedlmsg = "Possible data truncation - lines that were" ,
                  putwidth "characters long were pasted into lines" ,
                  "that were" linelen "characters long"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ001)"
      END
   IF dest_rc /= 20 & tline > 5 THEN
      "LOCATE" tline - 5
RETURN

Initialize_Variables:
   zedsmsg = ""
   msgtextb = "----------------------------Begin New Lines----------------" ||,
              "-----------"
   msgtexte = "-----------------------------End New Lines-----------------" ||,
              "-----------"
   msgtextn = "-----------------------New Dataset or PDS Member-----------" ||,
              "-----------"
RETURN
