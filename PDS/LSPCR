/* REXX */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
 * 05/28/2001 - LSPCR - Full Screen LSPC command                     *
 *                                                                   *
 * Author:    Michael A. Newell, WB4HUC                              *
 *                                                                   *
 * Invocation - From the ISPF command line:                          *
 *                                                                   *
 *              TSO LSPCR                                            *
 *                                                                   *
 * This exec will allow you to execute the TSO LSPC command in       *
 * full screen mode, with scrolling, and will allow you to show      *
 * up to six groups of DASD volumes at one time.                     *
 *                                                                   *
\* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Get list of volumes                                               */

ARG lspcprm1 lspcprm2 lspcprm3 lspcprm4 lspcprm5 lspcprm6 .

/* Is ISPF active?                                                   */

IF SYSVAR("SYSISPF") = "NOT ACTIVE" THEN
  DO
    SAY 'This command can only be run from ISPF.'
    SAY 'Start an ISPF session and try the command again.'
    EXIT
  END

/* All commands default to ISPF                                      */

ADDRESS ISPEXEC

/* Always return to ISPF after errors                                */

"CONTROL ERRORS RETURN"

/* Eliminate any duplicate parms that were entered                   */

CALL Drop_Duplicate_Parms

/* Initialize variables                                              */

CALL Initialize_Variables

/* Do until PF3 or PF4 pressed                                       */

DO WHILE panel_rc < 8
   IF LEFT(zcmd,4) = 'SORT' THEN
      DO
        CALL Sort_Table
        Call Display_Panel
        ITERATE
      END
   /*
      The way the exec is shipped, you will see an updated display
      each time you press the ENTER key. If you are displaying 100
      volumes or more, there will be a noticeable delay in the updating
      of the panel. If you DO NOT want the display to be updated when
      you press the ENTER key, then simply uncomment the block of
      code immediately below. After this code is uncommented, the
      display will be updated only if you enter a SORT command or if
      you enter new information on the VOLUMES line of the panel. Just
      pressing the ENTER key without changing information will not
      update the display.
   */
   /*
   IF lspcpprm = old_lspcpprm THEN
      DO
        CALL Display_Panel
        ITERATE
      END
   */
   IF lspcpprm /= old_lspcpprm THEN
      DO
        old_lspcpprm = lspcpprm
        csr_pos = 'CURSOR(LSPCPPRM)'
      END
   CALL Issue_Command
   IF Build_Table() = 0 THEN
        CALL Display_Panel
   ELSE
      panel_rc = 8
END

/* Close the ISPF tables                                             */

"TBCLOSE LSPCTBL"
"TBCLOSE LSPCTBL1"

/* Store DASD volume parms in user's profile pool                    */

lspcprms = lspcpprm
"VPUT (lspcprms) PROFILE"

EXIT

Issue_Command:

   /* Issue TSO LSPACE command and capture the output          */

   dummy = OUTTRAP("line.","*")
   DO i = 1 to 6
      INTERPRET 'lspcparm = lspcprm'i
      IF lspcparm /= '' THEN
         ADDRESS TSO "LSPC " lspcparm
      IF lspcparm = '' & i = 1 THEN
         ADDRESS TSO "LSPC " lspcparm
      IF lspcparm = '' & i > 1 THEN LEAVE
      x = line.0
      IF LEFT(line.x,3) = 'HMD' THEN
         line.x = line.x '-->' lspcparm
   END
   dummy = OUTTRAP('OFF')
RETURN

Build_Table:

   /* Create an ISPF table then write the LSPACE command output*/
   /*    to it                                                 */
   /*    This table is not the table displayed on the screen.  */
   /*    This table is built to contain the intial LSPACE      */
   /*    command output, then a new table is built and the     */
   /*    LSPCACE output contained in this table is sorted and  */
   /*    written to the new table, and displayed from the new  */
   /*    table                                                 */

   IF Create_Table() > 0 THEN
      RETURN tbcreate_rc
   DO i = 1 TO line.0
      IF Add_to_Table() > 0 THEN
         RETURN tbadd_rc
   END
   IF lspcsrtf = '' & lspcsrto = '' THEN
      DO
        "TBSORT LSPCTBL FIELDS(vsl,C,A,fcyl,N,D)"
        CALL Fill_Display_Table
      END
   ELSE
      CALL Sort_Table
RETURN 0

Create_Table:

   /* Subroutine to create the ISPF table                      */

   "TBCREATE LSPCTBL NAMES("tblflds") NOWRITE REPLACE"
   tbcreate_rc = rc
   IF tbcreate_rc = 4 THEN
      tbcreate_rc = 0
   IF tbcreate_rc > 0 THEN
      DO
        "SETMSG MSG(ISRZ002)"
        RETURN tbcreate_rc
      END
   "TBCREATE LSPCTBL1 NAMES("tblflds") NOWRITE REPLACE"
   tbcreate_rc = rc
   IF tbcreate_rc = 4 THEN
      tbcreate_rc = 0
   IF tbcreate_rc > 0 THEN
      "SETMSG MSG(ISRZ002)"
RETURN tbcreate_rc

Add_To_Table:

   /* Subroutine to add LSPACE command output to ISPF table    */

   lspcline = line.i
   IF LEFT(lspcline,3) = 'HMD' | ,
      LEFT(lspcline,3) = 'IKJ' THEN
      DO
        CALL Build_Error_Msg
        RETURN 0
      END
   PARSE VAR line.i uaddr volser . . . . .
   vsl = LEFT(volser,3)
   i1 = i + 1
   CALL Drop_Leading_Zeroes
   "TBADD LSPCTBL MULT("line.0")"
   tbadd_rc = rc
   IF tbadd_rc > 0 THEN
      "SETMSG MSG(ISRZ002)"
   i = i + 1
RETURN tbadd_rc

Drop_Leading_Zeroes:

   /* Drop leading zeroes from all numbers displayed on screen */

   PARSE VALUE line.i1 WITH fcyl ',' ftrk ',' fxtnt ',' ctrk
   PARSE VALUE fcyl WITH garbage '=' fcyl
   PARSE VALUE fxtnt WITH fxtnt '/' ccyl
   fcyl = STRIP(fcyl)
   ftrk = STRIP(ftrk)
   fxtnt = STRIP(fxtnt)
   ccyl = STRIP(ccyl)
   ctrk = STRIP(ctrk)
   IF fcyl > 0 THEN
      fcyl  = RIGHT(STRIP(fcyl,'L','0'),4)
   ELSE
      DO
        fcyl  = RIGHT(fcyl,1)
        fcyl  = RIGHT(fcyl,4)
      END
   IF ftrk > 0 THEN
      ftrk  = RIGHT(STRIP(ftrk,'L','0'),4)
   ELSE
      DO
        ftrk  = RIGHT(ftrk,1)
        ftrk  = RIGHT(ftrk,4)
      END
   IF fxtnt > 0 THEN
      fxtnt = RIGHT(STRIP(fxtnt,'L','0'),7)
   ELSE
      DO
        fxtnt  = RIGHT(fxtnt,1)
        fxtnt  = RIGHT(fxtnt,7)
      END
   IF ccyl > 0 THEN
      ccyl  = RIGHT(STRIP(ccyl,'L','0'),10)
   ELSE
      DO
        ccyl  = RIGHT(ccyl,1)
        ccyl  = RIGHT(ccyl,10)
      END
   IF ctrk > 0 THEN
      ctrk  = RIGHT(STRIP(ctrk,'L','0'),10)
   ELSE
      DO
        ctrk  = RIGHT(ctrk,1)
        ctrk  = RIGHT(ctrk,10)
      END
RETURN

Fill_Display_Table:

   /* Create a second ISPF table to hold sorted output where   */
   /*    groups of DASD volumes are separated by a blank line  */
   /*    This table is the one displayed on the ISPF screen    */

   vsl = 'dummy'
   old_vsl = vsl
   "TBTOP  LSPCTBL"
   "TBQUERY LSPCTBL ROWNUM("nbrrows")"
   DO j = 1 to nbrrows
      "TBSKIP LSPCTBL NUMBER(1)"
      "TBGET LSPCTBL"
      IF vsl /= old_vsl THEN
         DO
           old_vsl = vsl
           IF j > 1 THEN
              CALL Add_Blank_Line
         END
      "TBADD LSPCTBL1 MULT("nbrrows")"
   END
   "TBTOP  LSPCTBL1"
   DROP NBRROWS
   DROP line.
RETURN

Add_Blank_Line:

   /* Subroutine to add a blank line between groups of DASD    */
   /*     volumes                                              */

   old_uaddr  = uaddr
   old_vsl    = vsl
   old_volser = volser
   old_fcyl   = fcyl
   old_ftrk   = ftrk
   old_fxtnt  = fxtnt
   old_ccyl   = ccyl
   old_ctrk   = ctrk
   uaddr  = ''
   vsl    = ''
   volser = ''
   fcyl   = ''
   ftrk   = ''
   fxtnt  = ''
   ccyl   = ''
   ctrk   = ''
   "TBADD LSPCTBL1 MULT("nbrrows")"
   uaddr  = old_uaddr
   vsl    = old_vsl
   volser = old_volser
   fcyl   = old_fcyl
   ftrk   = old_ftrk
   fxtnt  = old_fxtnt
   ccyl   = old_ccyl
   ctrk   = old_ctrk
RETURN

Build_Error_Msg:

   /* Subroutine to build error message display lines          */

   error_flag = 1
   errmsg_sub = errmsg.0 + 1
   errmsg.errmsg_sub = LEFT(lspcline,term_width)
   errmsg.0 = errmsg_sub
RETURN

Sort_Table:

   /* Subroutine to process the SORT command and sort table    */
   /*     accordingly                                          */

   IF LEFT(zcmd,4) = 'SORT' THEN
      DO
        PARSE VAR zcmd zcmd sort_field sort_order
        lspcsrtf = sort_field
        lspcsrto = sort_order
        csr_pos = 'CURSOR(ZCMD)'
      END
   ELSE
      DO
        sort_order = lspcsrto
        sort_field = lspcsrtf
      END
   IF sort_order = '' & sort_field = '' THEN
      DO
        sort_order = 'D'
        sort_field = 2
      END
   IF sort_order = '' THEN
      sort_order = 'A'
   IF DATATYPE(sort_field) /= 'NUM' THEN
      DO
        zedsmsg = 'Sort Field Not Numeric'
        zedlmsg = 'Sort Field Must Be Numeric'
        "SETMSG MSG(ISRZ001)"
        RETURN 12
      END
   sort_field = TRUNC(sort_field,0)
   IF sort_field < 1 | sort_field > 6 THEN
      DO
        zedsmsg = 'Sort Field Out of Range'
        zedlmsg = 'Sort Field Must Be From 1 to 6, Inclusive'
        "SETMSG MSG(ISRZ001)"
        RETURN 12
      END
   IF sort_order /= 'A' & sort_order /= 'D' THEN
      DO
        zedsmsg = 'Sort Order Invalid'
        zedlmsg = 'Sort Order Must Be "A" or "D"'
        "SETMSG MSG(ISRZ001)"
        RETURN 12
      END
   "VPUT (lspcsrtf lspcsrto) PROFILE"
   SELECT
     WHEN sort_field = 1 THEN
          "TBSORT LSPCTBL FIELDS(VOLSER,C,"sort_order")"
     WHEN sort_field = 2 THEN
          "TBSORT LSPCTBL FIELDS(VSL,C,A,FCYL,N,"sort_order")"
     WHEN sort_field = 3 THEN
          "TBSORT LSPCTBL FIELDS(VSL,C,A,FTRK,N,"sort_order")"
     WHEN sort_field = 4 THEN
          "TBSORT LSPCTBL FIELDS(VSL,C,A,FXTNT,N,"sort_order")"
     WHEN sort_field = 5 THEN
          "TBSORT LSPCTBL FIELDS(VSL,C,A,CCYL,N,"sort_order")"
     WHEN sort_field = 6 THEN
          "TBSORT LSPCTBL FIELDS(VSL,C,A,CTRK,N,"sort_order")"
   OTHERWISE
     NOP
   END
   tbsort_rc = rc
   IF tbsort_rc > 0 THEN
      DO
        "SETMSG MSG(ISRZ002)"
        RETURN 12
      END
   "TBCLOSE  LSPCTBL1"
   "TBCREATE LSPCTBL1 NAMES("tblflds") NOWRITE REPLACE"
   tbcreate_rc = rc
   IF tbcreate_rc = 4 THEN
      tbcreate_rc = 0
   IF tbcreate_rc > 0 THEN
      DO
        "SETMSG MSG(ISRZ002)"
        RETURN 12
      END
   CALL Fill_Display_Table
RETURN 0

Display_Panel:

   /* Subroutine to display the sorted ISPF table              */

   IF error_flag = 1 THEN
      CALL Build_Error_Messages
   "TBDISPL LSPCTBL1 PANEL(LSPCPNL)" csr_pos
   panel_rc = rc
   IF panel_rc = 4 | panel_rc = 8 THEN
      RETURN panel_rc
   ELSE
      IF panel_rc /= 0 THEN
         "SETMSG MSG(ISRZ002)"
   PARSE VAR lspcpprm lspcprm1 lspcprm2 lspcprm3 ,
                      lspcprm4 lspcprm5 lspcprm6 . . . .
   CALL Drop_Duplicate_Parms
   lspcpprm = lspcprm1 lspcprm2 lspcprm3 ,
              lspcprm4 lspcprm5 lspcprm6
RETURN panel_rc

Build_Error_Messages:

   /* Subroutine to display any error messages produced from   */
   /*     TSO LSPACE command                                   */

   zedlmsg = ''
   DO i = 1 to errmsg.0
      zedlmsg = zedlmsg || errmsg.i
   END
   "SETMSG MSG(ISRZ001)"
   error_flag = 0
   drop errmsg.
   errmsg.0 = 0
RETURN

Drop_Duplicate_Parms:

   /* Subroutine to eliminate any duplicate parameters         */

  wordlist = lspcprm1 lspcprm2 lspcprm3  ,
             lspcprm4 lspcprm5 lspcprm6
  hadword. = 0
  outlist  = ''
  DO WHILE wordlist /= ''
    PARSE VAR wordlist word wordlist
    IF hadword.word then
       ITERATE
    hadword.word=1
    outlist=outlist word
  END
  DO i = 1 to 6
     INTERPRET 'DROP lspcprm'i
  END
  PARSE VAR outlist lspcprm1 lspcprm2 lspcprm3 ,
                    lspcprm4 lspcprm5 lspcprm6
RETURN

Initialize_Variables:

   /* Subroutine to initialize program variables               */

   lspcsrtf   = ''
   lspcsrto   = ''
   first_time = 1
   errmsg.0   = 0
   errmsg_sub = 0
   error_flag = 0
   term_width = SYSVAR(SYSWTERM)
   tblflds    = 'uaddr vsl volser fcyl ftrk fxtnt ccyl ctrk'
   dtl        = '*'uaddr'   *'volser'    *'fcyl     ,
                '   *'ftrk'    *'fxtnt'      *'ccyl   ,
                '         *'ctrk
   "VGET (lspcsrtf lspcsrto lspcprms) PROFILE"
   csr_pos    = 'CURSOR(LSPCPPRM)'
   lspcpprm   = lspcprm1 lspcprm2 lspcprm3 ,
                lspcprm4 lspcprm5 lspcprm6
   IF lspcpprm = '' THEN
      DO
        lspcpprm = lspcprms
        PARSE VAR lspcpprm lspcprm1 lspcprm2 lspcprm3 ,
                  lspcprm4 lspcprm5 lspcprm6 . . . .
      END
   old_lspcpprm = 'dummy'
RETURN
